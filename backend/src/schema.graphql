# import * from './generated/prisma.graphql'

type Query {
  me: User
  users: [User]
  course(id: ID!): Course
  courses: [Course]
  chat: Chat
}

type Mutation {
  signup(name: String!, email: String!, password: String!): Payload
  signin(email: String!, password: String!): Payload
  signout: Payload
  updateUser(email: String, name: String, image: String): Payload
  updatePwd(password: String!, newPassword: String!): Payload
  createChat: Chat
  createMessage(id: ID!, text: String!, style: Style): Message
  createPurchase(id: ID!, token: String!): Payload
  signS3(filename: String!, filetype: String!): S3Payload
}

type Subscription {
  chat(id: ID!): Chat
}

type User {
  id: ID!
  name: String!
  email: String!
  password: String
  image: String
  githubId: String
  messages: [Message]
  courses: [Course]
  purchases: [Purchase]
  chat: Chat
  role: Role!
  createdAt: DateTime!
}

type Course {
  id: ID!
  title: String!
  summary: String!
  description: String!
  image: String
  tags: [String]!
  difficulty: Difficulty!
  price: Int!
  videos: [Video!]!
  createdAt: DateTime!
}

type Purchase {
  id: ID!
  charge: String!
  total: Int!
  course: Course!
  user: User!
  createdAt: DateTime!
}

type Video {
  id: ID!
  title: String!
  description: String!
  url: String!
  number: Int!
  section: String!
  time: Int!
  course: Course!
  createdAt: DateTime!
}

type Chat {
  id: ID!
  slackId: String
  messages: [Message]
  user: User!
  createdAt: DateTime!
}

type Message {
  id: ID!
  style: Style!
  text: String!
  chat: Chat!
  user: User!
  createdAt: DateTime!
}

type Payload {
  success: Boolean
  message: String
}

type S3Payload {
  requestUrl: String
  fileUrl: String
}

enum Role {
  USER
  ADMIN
}

enum Difficulty {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum Style {
  TEXT
  CODE
  IMAGE
}
